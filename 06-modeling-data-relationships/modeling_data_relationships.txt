1. Create a database for the model we built in the example. Create a SQL file that creates the 
tables and inserts sample data (the questions below will help you create the data). Write queries 
applying the following scenarios:

[see hotel_data.sql for code]

-----------------------------------------------------------
- Find a guest who exists in the database and has not booked a room.

SELECT *
FROM guests
LEFT OUTER JOIN bookings ON bookings.guest_id = guests.id
WHERE bookings.guest_id IS NULL;

| id | first_name | last_name | phone_number |            email |                    address |     id | guest_id | room_id | check_in | check_out |
|----|------------|-----------|--------------|------------------|----------------------------|--------|----------|---------|----------|-----------|
|  1 |       Dave |     Smith | 555-555-1234 | dave@bigdave.com | 25 Dave Avenue, London, UK | (null) |   (null) |  (null) |   (null) |    (null) |

-----------------------------------------------------------
- Find bookings for a guest who has booked two rooms for the same dates.

SELECT guests.first_name, guests.last_name, b1.id, b1.check_in, b1.check_out
FROM bookings AS b1, bookings AS b2
JOIN guests ON b2.guest_id = guests.id
WHERE b1.check_in = b2.check_in AND b1.check_out = b2.check_out
AND b1.room_id != b2.room_id;

| first_name | last_name | id |   check_in |  check_out |
|------------|-----------|----|------------|------------|
|       Theo |       Cat |  1 | 2018-04-26 | 2018-04-29 |
|       Theo |       Cat |  2 | 2018-04-26 | 2018-04-29 |

-----------------------------------------------------------
- Find bookings for a guest who has booked one room several times on different dates.

SELECT guests.first_name, guests.last_name, b1.id AS booking_id, b1.room_id, b1.check_in, b1.check_out
FROM bookings AS b1, bookings as b2
JOIN guests ON b2.guest_id = guests.id
WHERE b1.guest_id = b2.guest_id
AND b1.room_id = b2.room_id
AND b1.check_in != b2.check_in
AND b1.check_out != b2.check_out;

| first_name | last_name | booking_id | room_id |   check_in |  check_out |
|------------|-----------|------------|---------|------------|------------|
|     Mickey |     Mouse |          4 |       3 | 2018-04-28 | 2018-05-02 |
|     Mickey |     Mouse |          3 |       3 | 2017-04-28 | 2017-05-02 |

-----------------------------------------------------------
- Count the number of unique guests who have booked the same room.

SELECT COUNT(DISTINCT(bookings.guest_id)) AS unique_guests_per_room, bookings.room_id
FROM bookings
GROUP BY bookings.room_id;

| unique_guests_per_room | room_id |
|------------------------|---------|
|                      2 |       2 |
|                      1 |       3 |
|                      1 |       4 |
|                      1 |       5 |


2. Design a data model for students and the classes they have taken. The model should include the 
students' grades for a given class.
Work through the questions from the example above.
Document any assumptions you make about what data should be stored, what data types should be used, etc.

What classes/entites do we need to model?

At a minimum, we need a table to track all students enrolled within the school. We also need to store all the
possible classes that are available within the school. Finally, we need a way to track which class each student
has successfully completed and, as mentioned in the problem, a way to include the final grade for that class.
For this purpose, I believe a separate table 'completed_classes', including both the student id, the class id and 
their final grade would suffice, allowing us to accurately represent and query which students have completed
which classes and vice versa.

What fields/attributes will each entity need?

For the students table, I assumed that we would need to store contact information for that student such as 
address, email, phone number etc. This is all stored within a table assigning each student a student ID as 
the primary key. For the table to represent the available classes, I also used a class id to uniquely 
identify each class offered, but then also included some further clarifying information such as the title of 
the class, and potentially, which department this falls under, such as history, computing, music etc. 
Finally, for the completed_classes table I believe a student id (as a foreign key) and a class id (also as a 
foreign key) along with the completed grade of that student for that class will give us the required data.

What data types do we need to use?

For the student table, mostly strings (varchar) to store student info. For the classes, again mostly strings 
(aside from the id) to describe the class title & department. Finally, for the completed_classes table, 
integers as the foreign keys back to the other two tables, and a very short varchar to represent the final grade.

How should those relationships be represented in tables?

Most of the relationships mentioned in the above model would fall into the 'many-to-many' category. For example, 
if we are to assume that this is a university environment, where it is not one-to-one tuition, each class can 
have many students at any one time. Also, each student can currently be enrolled in many classes at any one 
time, so I believe this would be a many-to-many relationship. 
However, in my example, because there is no direct relationship from a student to a class, each one is related 
through the completed_classes table, this would be a one-to-many relationship because whilst many students can 
complete the same class, it is unlikely that the class can be completed more than once, meaning that whilst a 
student can have many completed_classes, each completed_class item will refer specifically back to one student.

Draw the model using the notation used in the checkpoint and submit a picture. 
You can also use a tool like StarUML or quickdatabasediagrams.com if you choose.

https://www.dropbox.com/s/qyk1g9njprqrfho/students_classes.png?dl=0


3. Build a database for the students/classes data model. Create a SQL file that creates the tables and inserts
sample data (the questions below will help you create the data). Write queries for the following data:

[see school_data.sql for code]

-----------------------------------------------------------
- All students who have taken a particular class.

SELECT students.first_name, students.last_name, classes.class_title, classes.department, completed_classes.final_grade
FROM completed_classes
JOIN students ON completed_classes.student_id = students.id
JOIN classes ON completed_classes.class_id = classes.id
ORDER BY classes.class_title;

| first_name | last_name |          class_title |         department | final_grade |
|------------|-----------|----------------------|--------------------|-------------|
|       Bloc |      Head |            Astronomy |            Physics |           C |
|     Mickey |     Mouse |            Astronomy |            Physics |           A |
|       Bloc |      Head |      Composition 301 |              Music |           D |
|     Mickey |     Mouse |      Composition 301 |              Music |           A |
|       Theo |       Cat |      Composition 301 |              Music |           A |
|     Mickey |     Mouse | CS 101: Introduction |   Computer Science |           B |
|       Theo |       Cat | CS 101: Introduction |   Computer Science |           A |
|        Sir |   Mixalot | CS 101: Introduction |   Computer Science |           C |
|       Dave |     Smith | CS 101: Introduction |   Computer Science |           C |
|       Theo |       Cat |   History of England |            History |           A |
|        Sir |   Mixalot |   History of England |            History |           B |
|       Bloc |      Head |    Organic Chemistry |          Chemistry |           C |
|     Mickey |     Mouse |    Organic Chemistry |          Chemistry |           B |
|     Mickey |     Mouse |          Polynomials |        Mathematics |           A |
|        Sir |   Mixalot |          Polynomials |        Mathematics |           D |
|     Mickey |     Mouse |      Shakespeare 101 | English Literature |           B |
|       Dave |     Smith |      Shakespeare 101 | English Literature |           B |


Or like this...? 

SELECT students.first_name, students.last_name, classes.class_title, classes.department, completed_classes.final_grade
FROM completed_classes
JOIN students ON completed_classes.student_id = students.id
JOIN classes ON completed_classes.class_id = classes.id
WHERE classes.id = 1
ORDER BY classes.class_title;

| first_name | last_name |          class_title |       department | final_grade |
|------------|-----------|----------------------|------------------|-------------|
|       Dave |     Smith | CS 101: Introduction | Computer Science |           C |
|       Theo |       Cat | CS 101: Introduction | Computer Science |           A |
|        Sir |   Mixalot | CS 101: Introduction | Computer Science |           C |
|     Mickey |     Mouse | CS 101: Introduction | Computer Science |           B |

-----------------------------------------------------------
- The number of each grade (using letter grades A-F) earned in a particular class.

SELECT classes.class_title, completed_classes.final_grade, COUNT(completed_classes.final_grade)
FROM completed_classes
JOIN students ON completed_classes.student_id = students.id
JOIN classes on completed_classes.class_id = classes.id
GROUP BY completed_classes.final_grade, classes.class_title
ORDER BY class_title;

|          class_title | final_grade | count |
|----------------------|-------------|-------|
|            Astronomy |           A |     1 |
|            Astronomy |           C |     1 |
|      Composition 301 |           A |     2 |
|      Composition 301 |           D |     1 |
| CS 101: Introduction |           A |     1 |
| CS 101: Introduction |           B |     1 |
| CS 101: Introduction |           C |     2 |
|   History of England |           A |     1 |
|   History of England |           B |     1 |
|    Organic Chemistry |           B |     1 |
|    Organic Chemistry |           C |     1 |
|          Polynomials |           A |     1 |
|          Polynomials |           D |     1 |
|      Shakespeare 101 |           B |     2 |


Or like this...?

SELECT classes.class_title, completed_classes.final_grade, COUNT(completed_classes.final_grade)
FROM completed_classes
JOIN students ON completed_classes.student_id = students.id
JOIN classes on completed_classes.class_id = classes.id
WHERE classes.id = 6
GROUP BY completed_classes.final_grade, classes.class_title
ORDER BY class_title;

|     class_title | final_grade | count |
|-----------------|-------------|-------|
| Composition 301 |           A |     2 |
| Composition 301 |           D |     1 |

-----------------------------------------------------------
- Class names and the total number of students who have taken each class in the list.

SELECT classes.id, classes.class_title, COUNT(completed_classes.class_id) AS total_number_students
FROM completed_classes
JOIN classes ON completed_classes.class_id = classes.id
GROUP BY completed_classes.class_id, classes,id
ORDER BY total_number_students ASC;

| id |          class_title | total_number_students |
|----|----------------------|-----------------------|
|  4 |    Organic Chemistry |                     2 |
|  5 |      Shakespeare 101 |                     2 |
|  3 |          Polynomials |                     2 |
|  2 |   History of England |                     2 |
|  7 |            Astronomy |                     2 |
|  6 |      Composition 301 |                     3 |
|  1 | CS 101: Introduction |                     4 |


-----------------------------------------------------------
- The class taken by the largest number of students.

SELECT classes.id, classes.class_title, COUNT(completed_classes.class_id) AS total_number_students
FROM completed_classes
JOIN classes ON completed_classes.class_id = classes.id
GROUP BY completed_classes.class_id, classes,id
ORDER BY total_number_students DESC LIMIT 1;

| id |          class_title | total_number_students |
|----|----------------------|-----------------------|
|  1 | CS 101: Introduction |                     4 |



